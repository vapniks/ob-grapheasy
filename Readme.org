* Commentary
Bitcoin donations gratefully accepted: 1ArFina3Mi8UDghjarGqATeBgXRDWrsmzo

org-babel support for evaluating Graph::Easy graph descriptions, and printing the results
into an org file as ascii or unicode diagrams, or any other format supported by the graph-easy binary.

For information on Graph::Easy see http://bloodgate.com/perl/graph/manual/index.html

This differs from most standard languages in that

 1) there is no such thing as a "session" in Graph::Easy

 2) the following extra header arguments are allowed: "infmt", "outfmt", "renderer" & "copy"

 3) you must have the graph-easy perl script installed

You can use the :var header argument to assign values to variables which can be referenced by prefixing
the variable name with a $ in the grapheasy code. For example.

#+begin_src text
\#+begin_src grapheasy :var a="foo" :var b="bar"
[$a]->[$b]
\#+end_src

which expands to:

\#+RESULTS:
┌─────┐     ┌─────┐
│ foo │ ──> │ bar │
└─────┘     └─────┘
#+end_src

The :copy header argument has the effect of skipping the evaluation step, but still performing variable substitution.
This enables you to reuse graphs from other code blocks, by referring to them in variable assignments, e.g:

#+begin_src txt
\#+name: simple_network
\#+begin_src grapheasy 
[Internet]<->[$modem]<->[$router]<->[$c1],[$c2]
\#+end_src

\#+begin_src grapheasy :copy :var net=simple_network(modem="belkin",router="tomato",c1="foo",c2="bar")
My network:
$net
\#+end_src

\#+RESULTS:
:results:
My network:
┌──────────┐      ┌────────┐      ┌────────┐      ┌─────┐
│ Internet │ <──> │ belkin │ <──> │ tomato │ <──> │ bar │
└──────────┘      └────────┘      └────────┘      └─────┘
                                   ∧
                                   │
                                   │
                                   ∨
                                   ┌────────┐
                                   │  foo   │
                                   └────────┘
:end:
#+end_src
* Installation

To make sure you have the most up-to-date version of this library it is best to install 
using the emacs package system, with the appropriate repository added (e.g https://melpa.org/)

To install without using a package manager:

 - Put the library in a directory in the emacs load path, like ~/.emacs.d/
 - Customize the `org-babel-load-languages' so that it includes (grapheasy . t) in the list:
    M-x customize-variable org-babel-load-languages

* Customizable Options

 Below is a list of customizable options:

   - *org-babel-default-outfmt:grapheasy* :
    Default output format for grapheasy source code blocks.\\
    default value: =boxart=
   - *org-babel-default-infmt:grapheasy* :
    Default input format for grapheasy source code blocks.\\
    default = =txt=
   - *org-babel-default-renderer:grapheasy* :
    Default renderer to use for grapheasy source code blocks.\\
    default = =dot=
